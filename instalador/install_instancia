#!/bin/bash
# Script para instalação de uma nova instância

# Definir variáveis de ambiente
export PROJECT_ROOT=$(pwd)
export LOG_FILE="/var/log/atendechat_install.log"

# Função de logging
log() {
  local message="$1"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "[$timestamp] $message" | tee -a "$LOG_FILE"
}

log_error() {
  local message="$1"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "[$timestamp] ERROR: $message" | tee -a "$LOG_FILE" >&2
}

# Configurar permissões do arquivo de log
sudo touch "$LOG_FILE"
sudo chmod 666 "$LOG_FILE"

# Registrar início da instalação
log "Iniciando processo de instalação de nova instância do Atendechat"
log "Projeto raiz: $PROJECT_ROOT"

# Incluir arquivos necessários
source "${PROJECT_ROOT}"/variables/_app.sh
source "${PROJECT_ROOT}"/variables/_general.sh
source "${PROJECT_ROOT}"/variables/_background.sh
source "${PROJECT_ROOT}"/variables/_fonts.sh
source "${PROJECT_ROOT}"/utils/_banner.sh
source "${PROJECT_ROOT}"/lib/_backend.sh
source "${PROJECT_ROOT}"/lib/_frontend.sh
source "${PROJECT_ROOT}"/lib/_system.sh
source "${PROJECT_ROOT}"/lib/_inquiry.sh

# Definir o link do git automaticamente
# Preferimos SSH agora que está configurado corretamente
link_git="git@github.com:fuwork/chat-atendente.git"
# Alternativa: use HTTPS se a configuração SSH não funcionar
# link_git="https://github.com/fuwork/chat-atendente.git"
# Caminho local caso o repositório já esteja na máquina
codigo_fonte_local="/root/containers/chat-atendente"
log "Link do repositório Git: $link_git"
log "Caminho do código fonte local: $codigo_fonte_local"

# Função para configurar SSH para GitHub
setup_github_ssh() {
  print_banner
  printf "${WHITE} 💻 Configurando acesso SSH para GitHub...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando acesso SSH para GitHub"

  sleep 2

  # Verificar se o usuário deploy já tem uma chave SSH
  if sudo su - deploy -c "[ -f ~/.ssh/id_ed25519 ]"; then
    log "Chave SSH já existe para o usuário deploy"
    printf "${GREEN}Chave SSH já existe para o usuário deploy.${NC}\n"
  else
    log "Gerando nova chave SSH para o usuário deploy"
    printf "${YELLOW}Gerando nova chave SSH para o usuário deploy...${NC}\n"
    
    # Gerar chave SSH sem senha para automação
    sudo su - deploy -c "mkdir -p ~/.ssh && ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N '' -C 'deploy@$(hostname)'" >> "$LOG_FILE" 2>&1
    
    if [ $? -ne 0 ]; then
      log_error "Falha ao gerar chave SSH"
      printf "${RED}Falha ao gerar chave SSH. Verifique o log para mais detalhes.${NC}\n"
      return 1
    fi
    
    # Exibir a chave pública para o usuário adicionar ao GitHub
    printf "${WHITE}============================================================${NC}\n"
    printf "${WHITE}IMPORTANTE: Adicione esta chave SSH ao GitHub antes de continuar${NC}\n"
    printf "${WHITE}============================================================${NC}\n\n"
    printf "${CYAN_LIGHT}Chave pública SSH (copie e adicione ao GitHub):${NC}\n\n"
    sudo su - deploy -c "cat ~/.ssh/id_ed25519.pub"
    printf "\n\n"
    printf "${WHITE}============================================================${NC}\n"
    printf "${WHITE}Instruções:${NC}\n"
    printf "${WHITE}1. Copie a chave acima${NC}\n"
    printf "${WHITE}2. Acesse GitHub > Settings > SSH and GPG keys > New SSH key${NC}\n"
    printf "${WHITE}3. Cole a chave e adicione${NC}\n"
    printf "${WHITE}============================================================${NC}\n\n"
    
    # Perguntar se o usuário já adicionou a chave
    read -p "Você já adicionou a chave ao GitHub? (s/n): " ssh_added
    if [[ $ssh_added != "s" && $ssh_added != "S" ]]; then
      log_error "Usuário não adicionou a chave SSH ao GitHub"
      printf "${RED}Por favor, adicione a chave SSH ao GitHub antes de continuar.${NC}\n"
      return 1
    fi
  fi
  
  # Configurar GitHub no known_hosts para evitar prompts
  sudo su - deploy -c "mkdir -p ~/.ssh && ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts" >> "$LOG_FILE" 2>&1
  
  # Testar a conexão com GitHub
  log "Testando conexão SSH com GitHub"
  printf "${YELLOW}Testando conexão SSH com GitHub...${NC}\n"
  
  ssh_test=$(sudo su - deploy -c "ssh -T -o BatchMode=yes -o StrictHostKeyChecking=no git@github.com 2>&1")
  
  if echo "$ssh_test" | grep -q "successfully authenticated"; then
    log "Conexão SSH com GitHub estabelecida com sucesso"
    printf "${GREEN}Conexão SSH com GitHub estabelecida com sucesso!${NC}\n"
    return 0
  else
    log_error "Falha na conexão SSH com GitHub: $ssh_test"
    printf "${RED}Falha na conexão SSH com GitHub. Tentaremos usar HTTPS.${NC}\n"
    
    # Mudar para HTTPS se SSH falhar
    link_git="https://github.com/fuwork/chat-atendente.git"
    log "Alternando para HTTPS: $link_git"
    printf "${YELLOW}Alternando para HTTPS: $link_git${NC}\n"
    return 1
  fi
}

# Função para configurar Git para o usuário deploy
setup_git_config() {
  print_banner
  printf "${WHITE} 💻 Configurando Git para o usuário deploy...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando Git para o usuário deploy"

  sleep 2
  
  sudo su - deploy -c "git config --global user.name 'Deploy User'" >> "$LOG_FILE" 2>&1
  sudo su - deploy -c "git config --global user.email 'deploy@$(hostname)'" >> "$LOG_FILE" 2>&1
  
  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar Git para o usuário deploy"
    printf "${RED}Falha ao configurar Git para o usuário deploy.${NC}\n"
    return 1
  else
    log "Git configurado com sucesso para o usuário deploy"
    printf "${GREEN}Git configurado com sucesso para o usuário deploy!${NC}\n"
    return 0
  fi
}

# Função para resolver problemas conhecidos no código fonte
fix_known_issues() {
  print_banner
  printf "${WHITE} 💻 Corrigindo problemas conhecidos no código fonte...${GRAY_LIGHT}"
  printf "\n\n"
  log "Corrigindo problemas conhecidos no código fonte"

  sleep 2

  # Corrigir problema com @whiskeysockets/baileys e makeInMemoryStore
  sudo su - deploy <<EOF
  # Verificar se o arquivo existe antes de tentar corrigir
  if [ -f "/home/deploy/${instancia_add}/backend/src/libs/wbot.ts" ]; then
    log "Corrigindo problema com makeInMemoryStore em wbot.ts"
    # Fazer backup do arquivo original
    cp /home/deploy/${instancia_add}/backend/src/libs/wbot.ts /home/deploy/${instancia_add}/backend/src/libs/wbot.ts.bak
    
    # Corrigir o problema de importação do makeInMemoryStore
    sed -i 's/import { makeInMemoryStore/import makeInMemoryStore/g' /home/deploy/${instancia_add}/backend/src/libs/wbot.ts
    echo "Arquivo wbot.ts corrigido!" >> "$LOG_FILE"
  else
    echo "Arquivo wbot.ts não encontrado. Ignorando correção." >> "$LOG_FILE"
  fi
  
  # Corrigir problema com WAMessageStubType
  if [ -f "/home/deploy/${instancia_add}/backend/src/services/WbotServices/wbotMessageListener.ts" ]; then
    log "Corrigindo problema com WAMessageStubType em wbotMessageListener.ts"
    # Fazer backup do arquivo original
    cp /home/deploy/${instancia_add}/backend/src/services/WbotServices/wbotMessageListener.ts /home/deploy/${instancia_add}/backend/src/services/WbotServices/wbotMessageListener.ts.bak
    
    # Corrigir o problema de tipagem do WAMessageStubType
    sed -i 's/WAMessageStubType/typeof WAMessageStubType/g' /home/deploy/${instancia_add}/backend/src/services/WbotServices/wbotMessageListener.ts
    echo "Arquivo wbotMessageListener.ts corrigido!" >> "$LOG_FILE"
  else
    echo "Arquivo wbotMessageListener.ts não encontrado. Ignorando correção." >> "$LOG_FILE"
  fi
  
  # Criar arquivo config.json para Sequelize se não existir
  if [ ! -f "/home/deploy/${instancia_add}/backend/config/config.json" ]; then
    log "Criando arquivo config.json para Sequelize"
    mkdir -p /home/deploy/${instancia_add}/backend/config
    cat > /home/deploy/${instancia_add}/backend/config/config.json << 'END'
{
  "development": {
    "dialect": "postgres",
    "host": "localhost",
    "port": 5432,
    "database": "${instancia_add}",
    "username": "${instancia_add}",
    "password": "${mysql_root_password}",
    "logging": false
  },
  "production": {
    "dialect": "postgres",
    "host": "localhost",
    "port": 5432,
    "database": "${instancia_add}",
    "username": "${instancia_add}",
    "password": "${mysql_root_password}",
    "logging": false
  }
}
END
    # Substituir variáveis no arquivo
    sed -i "s/\${instancia_add}/${instancia_add}/g" /home/deploy/${instancia_add}/backend/config/config.json
    sed -i "s/\${mysql_root_password}/${mysql_root_password}/g" /home/deploy/${instancia_add}/backend/config/config.json
    echo "Arquivo config.json criado!" >> "$LOG_FILE"
  else
    echo "Arquivo config.json já existe. Ignorando criação." >> "$LOG_FILE"
  fi
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao corrigir problemas conhecidos no código fonte"
    printf "${RED}Falha ao corrigir problemas conhecidos. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Problemas conhecidos corrigidos com sucesso"
    printf "${GREEN}Problemas conhecidos corrigidos com sucesso!${NC}\n"
  fi

  sleep 2
}

# Função para verificar e configurar o Docker Swarm
system_check_swarm() {
  print_banner
  printf "${WHITE} 💻 Verificando se o Docker está no modo Swarm...${GRAY_LIGHT}"
  printf "\n\n"
  log "Verificando configuração do Docker Swarm"

  sleep 2

  # Verificar se o Docker está no modo Swarm
  swarm_status=$(docker info --format '{{.Swarm.LocalNodeState}}' 2>>"$LOG_FILE")
  
  if [ "$swarm_status" != "active" ]; then
    log_error "Docker não está no modo Swarm. Inicializando..."
    printf "${RED}Docker não está no modo Swarm. Inicializando...${NC}\n"
    sudo docker swarm init 2>>"$LOG_FILE"
    log "Docker Swarm inicializado!"
    printf "${GREEN}Docker Swarm inicializado!${NC}\n"
  else
    log "Docker já está no modo Swarm"
    printf "${GREEN}Docker já está no modo Swarm!${NC}\n"
  fi

  # Verificar se a rede network_public existe
  if ! docker network ls 2>>"$LOG_FILE" | grep -q "network_public"; then
    log_error "Rede network_public não encontrada. Criando..."
    printf "${RED}Rede network_public não encontrada. Criando...${NC}\n"
    docker network create --driver=overlay --attachable network_public 2>>"$LOG_FILE"
    log "Rede network_public criada!"
    printf "${GREEN}Rede network_public criada!${NC}\n"
  else
    log "Rede network_public já existe"
    printf "${GREEN}Rede network_public já existe!${NC}\n"
  fi

  # Verificar se o volume para certificados existe
  if ! docker volume ls 2>>"$LOG_FILE" | grep -q "volume_swarm_certificates"; then
    log_error "Volume volume_swarm_certificates não encontrado. Criando..."
    printf "${RED}Volume volume_swarm_certificates não encontrado. Criando...${NC}\n"
    docker volume create volume_swarm_certificates 2>>"$LOG_FILE"
    log "Volume volume_swarm_certificates criado!"
    printf "${GREEN}Volume volume_swarm_certificates criado!${NC}\n"
  else
    log "Volume volume_swarm_certificates já existe"
    printf "${GREEN}Volume volume_swarm_certificates já existe!${NC}\n"
  fi

  # Verificar se o volume compartilhado existe
  if ! docker volume ls 2>>"$LOG_FILE" | grep -q "volume_swarm_shared"; then
    log_error "Volume volume_swarm_shared não encontrado. Criando..."
    printf "${RED}Volume volume_swarm_shared não encontrado. Criando...${NC}\n"
    docker volume create volume_swarm_shared 2>>"$LOG_FILE"
    log "Volume volume_swarm_shared criado!"
    printf "${GREEN}Volume volume_swarm_shared criado!${NC}\n"
  else
    log "Volume volume_swarm_shared já existe"
    printf "${GREEN}Volume volume_swarm_shared já existe!${NC}\n"
  fi

  sleep 2
}

# Função modificada para criar as pastas do projeto e clonar o repositório
system_git_clone_modified() {
  print_banner
  printf "${WHITE} 💻 Criando estrutura de diretórios e copiando o código Atendechat...${GRAY_LIGHT}"
  printf "\n\n"
  log "Criando estrutura de diretórios e copiando o código Atendechat"

  sleep 2

  # Criar a estrutura básica de diretórios
  log "Criando diretórios para a instância ${instancia_add}"
  sudo su - deploy <<EOF
  mkdir -p /home/deploy/${instancia_add}/
  mkdir -p /home/deploy/${instancia_add}/frontend
  mkdir -p /home/deploy/${instancia_add}/backend
  mkdir -p /home/deploy/${instancia_add}/redis
EOF

  # Verificar se os diretórios foram criados
  if [ ! -d "/home/deploy/${instancia_add}" ]; then
    log_error "Falha ao criar diretório /home/deploy/${instancia_add}"
    exit 1
  fi
  
  log "Diretórios criados com sucesso"

  # Verificar se o código fonte local existe
  if [ -d "${codigo_fonte_local}" ]; then
    log "Usando código fonte local em: ${codigo_fonte_local}"
    # Copiar o código fonte local
    sudo cp -r ${codigo_fonte_local}/frontend/* /home/deploy/${instancia_add}/frontend/ 2>>"$LOG_FILE"
    sudo cp -r ${codigo_fonte_local}/backend/* /home/deploy/${instancia_add}/backend/ 2>>"$LOG_FILE"
    
    # Corrigir permissões dos arquivos - isso é crucial para evitar problemas de EACCES
    sudo chown -R deploy:deploy /home/deploy/${instancia_add}
    sudo chmod -R 755 /home/deploy/${instancia_add}
    
    if [ $? -ne 0 ]; then
      log_error "Falha ao copiar o código fonte local"
      printf "${RED}Falha ao copiar o código fonte local. Tentando clonar do GitHub...${NC}\n"
      use_git=true
    else
      log "Código fonte local copiado com sucesso"
      printf "${GREEN}Código fonte local copiado com sucesso!${NC}\n"
      use_git=false
    fi
  else
    log "Código fonte local não encontrado em: ${codigo_fonte_local}. Tentando clonar do GitHub."
    use_git=true
  fi
  
  # Se o código fonte local não funcionou ou não existe, tentar clonar do GitHub
  if [ "$use_git" = true ]; then
    log "Clonando repositório: ${link_git}"
    sudo su - deploy <<EOF
    cd /home/deploy
    git clone ${link_git} /home/deploy/temp_${instancia_add} >> "$LOG_FILE" 2>&1
    
    # Verificar se o clone foi bem-sucedido
    if [ -d "/home/deploy/temp_${instancia_add}" ]; then
      # Copiar os conteúdos para os diretórios apropriados
      cp -r /home/deploy/temp_${instancia_add}/frontend/* /home/deploy/${instancia_add}/frontend/ >> "$LOG_FILE" 2>&1
      cp -r /home/deploy/temp_${instancia_add}/backend/* /home/deploy/${instancia_add}/backend/ >> "$LOG_FILE" 2>&1
      
      # Remover o diretório temporário
      rm -rf /home/deploy/temp_${instancia_add}
      
      echo "Estrutura de diretórios criada com sucesso!" >> "$LOG_FILE"
    else
      echo "Falha ao clonar o repositório!" >> "$LOG_FILE"
      exit 1
    fi
EOF
  fi

  sleep 2
  
  # Verificar se os diretórios foram criados corretamente
  if [ ! -d "/home/deploy/${instancia_add}/frontend" ] || [ ! -d "/home/deploy/${instancia_add}/backend" ]; then
    log_error "Erro: Diretórios frontend ou backend não foram criados corretamente!"
    printf "${RED}Erro: Diretórios frontend ou backend não foram criados corretamente!${NC}\n"
    exit 1
  fi
  
  # Verificar se os arquivos package.json existem
  if [ ! -f "/home/deploy/${instancia_add}/frontend/package.json" ] || [ ! -f "/home/deploy/${instancia_add}/backend/package.json" ]; then
    log_error "Erro: Arquivos package.json não foram encontrados! Verifique se o código fonte está correto."
    printf "${RED}Erro: Arquivos package.json não foram encontrados! Verifique se o código fonte está correto.${NC}\n"
    exit 1
  else
    log "Diretórios e arquivos criados com sucesso!"
    printf "${GREEN}Diretórios e arquivos criados com sucesso!${NC}\n"
  fi
}

# Função para verificar o status da implantação
verify_deployment() {
  print_banner
  printf "${WHITE} 💻 Verificando status dos serviços...${GRAY_LIGHT}"
  printf "\n\n"
  log "Verificando status dos serviços"

  sleep 2

  printf "${YELLOW}Status do Redis:${NC}\n"
  docker service ls | grep redis-${instancia_add} | tee -a "$LOG_FILE"
  
  printf "\n${YELLOW}Status do Backend:${NC}\n"
  docker service ls | grep ${instancia_add}-backend | tee -a "$LOG_FILE"
  
  printf "\n${YELLOW}Status do Frontend:${NC}\n"
  docker service ls | grep ${instancia_add}-frontend | tee -a "$LOG_FILE"
  
  printf "\n${YELLOW}Logs do Backend:${NC}\n"
  docker service logs ${instancia_add}-backend_${instancia_add}-backend --tail 10 2>/dev/null | tee -a "$LOG_FILE" || echo "Ainda não há logs disponíveis"
  
  printf "\n${YELLOW}Logs do Frontend:${NC}\n"
  docker service logs ${instancia_add}-frontend_${instancia_add}-frontend --tail 10 2>/dev/null | tee -a "$LOG_FILE" || echo "Ainda não há logs disponíveis"
  
  printf "\n${GREEN}Verificação concluída! Acesse sua aplicação em:${NC}\n"
  printf "${CYAN_LIGHT}Frontend: ${frontend_url}${NC}\n"
  printf "${CYAN_LIGHT}Backend: ${backend_url}${NC}\n"
  
  # Verificar se os serviços estão em execução corretamente
  backend_replicas=$(docker service ls | grep ${instancia_add}-backend | awk '{print $4}')
  frontend_replicas=$(docker service ls | grep ${instancia_add}-frontend | awk '{print $4}')
  
  if [[ "$backend_replicas" != "1/1" || "$frontend_replicas" != "1/1" ]]; then
    printf "\n${RED}ATENÇÃO: Um ou mais serviços não estão em execução corretamente!${NC}\n"
    printf "${YELLOW}Dicas de solução de problemas:${NC}\n"
    printf "1. Verifique os logs completos dos serviços com:\n"
    printf "   docker service logs ${instancia_add}-backend_${instancia_add}-backend\n"
    printf "   docker service logs ${instancia_add}-frontend_${instancia_add}-frontend\n"
    printf "2. Verifique se as portas necessárias estão disponíveis\n"
    printf "3. Verifique se todos os arquivos foram copiados corretamente\n"
    printf "4. Tente reiniciar os serviços:\n"
    printf "   docker service update --force ${instancia_add}-backend_${instancia_add}-backend\n"
    printf "   docker service update --force ${instancia_add}-frontend_${instancia_add}-frontend\n"
  fi
  
  log "Verificação concluída. Frontend: ${frontend_url}, Backend: ${backend_url}"
}

# Função para configurar o backend com Traefik
backend_traefik_setup() {
  print_banner
  printf "${WHITE} 💻 Configurando Traefik (backend)...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando Traefik para o backend"

  sleep 2

  backend_hostname=$(echo "${backend_url/https:\/\/}")
  log "Backend hostname: ${backend_hostname}"

  # Criar arquivo docker-compose para o backend
  sudo su - deploy << EOF
  cat > /home/deploy/${instancia_add}/backend/docker-compose.yml << 'END'
version: '3.7'

services:
  ${instancia_add}-backend:
    image: node:20
    working_dir: /app
    volumes:
      - ./:/app
    command: node dist/server.js
    networks:
      - network_public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${instancia_add}-backend.rule=Host(\`${backend_hostname}\`)"
        - "traefik.http.routers.${instancia_add}-backend.entrypoints=websecure"
        - "traefik.http.services.${instancia_add}-backend.loadbalancer.server.port=${backend_port}"
        - "traefik.http.routers.${instancia_add}-backend.tls=true"
        - "traefik.http.routers.${instancia_add}-backend.tls.certresolver=letsencryptresolver"
        - "traefik.docker.network=network_public"

networks:
  network_public:
    external: true
    name: network_public
END

  # Iniciar o container como um serviço no swarm
  cd /home/deploy/${instancia_add}/backend
  docker stack deploy -c docker-compose.yml ${instancia_add}-backend >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar o Traefik para o backend"
    printf "${RED}Falha ao configurar o Traefik para o backend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Traefik configurado com sucesso para o backend"
    printf "${GREEN}Traefik configurado com sucesso para o backend!${NC}\n"
  fi

  sleep 2
}

# Função para configurar o frontend com Traefik
frontend_traefik_setup() {
  print_banner
  printf "${WHITE} 💻 Configurando Traefik (frontend)...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando Traefik para o frontend"

  sleep 2

  frontend_hostname=$(echo "${frontend_url/https:\/\/}")
  log "Frontend hostname: ${frontend_hostname}"

  # Criar arquivo docker-compose para o frontend
  sudo su - deploy << EOF
  cat > /home/deploy/${instancia_add}/frontend/docker-compose.yml << 'END'
version: '3.7'

services:
  ${instancia_add}-frontend:
    image: node:20
    working_dir: /app
    volumes:
      - ./:/app
    command: node server.js
    networks:
      - network_public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${instancia_add}-frontend.rule=Host(\`${frontend_hostname}\`)"
        - "traefik.http.routers.${instancia_add}-frontend.entrypoints=websecure"
        - "traefik.http.services.${instancia_add}-frontend.loadbalancer.server.port=${frontend_port}"
        - "traefik.http.routers.${instancia_add}-frontend.tls=true"
        - "traefik.http.routers.${instancia_add}-frontend.tls.certresolver=letsencryptresolver"
        - "traefik.docker.network=network_public"

networks:
  network_public:
    external: true
    name: network_public
END

  # Iniciar o container como um serviço no swarm
  cd /home/deploy/${instancia_add}/frontend
  docker stack deploy -c docker-compose.yml ${instancia_add}-frontend >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar o Traefik para o frontend"
    printf "${RED}Falha ao configurar o Traefik para o frontend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Traefik configurado com sucesso para o frontend"
    printf "${GREEN}Traefik configurado com sucesso para o frontend!${NC}\n"
  fi

  sleep 2
}

# Modificação da função backend_redis_create
backend_redis_create() {
  print_banner
  printf "${WHITE} 💻 Criando Redis & Banco Postgres...${GRAY_LIGHT}"
  printf "\n\n"
  log "Criando Redis e configurando banco Postgres"

  sleep 2

  # Criar docker-compose.yml para o Redis
  sudo su - deploy << EOF
  mkdir -p /home/deploy/${instancia_add}/redis
  cat > /home/deploy/${instancia_add}/redis/docker-compose.yml << 'END'
version: '3.7'

services:
  redis-${instancia_add}:
    image: redis:latest
    command: redis-server --requirepass ${mysql_root_password}
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  network_public:
    external: true
    name: network_public
END

  # Iniciar o Redis como serviço no swarm
  cd /home/deploy/${instancia_add}/redis
  docker stack deploy -c docker-compose.yml redis-${instancia_add} >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao criar o serviço Redis"
    printf "${RED}Falha ao criar o serviço Redis. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Serviço Redis criado com sucesso"
    printf "${GREEN}Serviço Redis criado com sucesso!${NC}\n"
  fi

  sleep 2

  # Configurar o banco de dados PostgreSQL
  log "Configurando banco de dados PostgreSQL"
  sudo su - root <<EOF
  sudo su - postgres
  createdb ${instancia_add} >> "$LOG_FILE" 2>&1
  psql << EOL
  CREATE USER ${instancia_add} SUPERUSER INHERIT CREATEDB CREATEROLE;
  ALTER USER ${instancia_add} PASSWORD '${mysql_root_password}';
  \q
EOL
  exit
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar o banco de dados PostgreSQL"
    printf "${RED}Falha ao configurar o banco de dados PostgreSQL. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Banco de dados PostgreSQL configurado com sucesso"
    printf "${GREEN}Banco de dados PostgreSQL configurado com sucesso!${NC}\n"
  fi

  sleep 2
}

# Modificar a função backend_set_env para usar o Redis em Docker Swarm
backend_set_env_modified() {
  print_banner
  printf "${WHITE} 💻 Configurando variáveis de ambiente (backend)...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando variáveis de ambiente para o backend"

  sleep 2

  # ensure idempotency
  backend_url=$(echo "${backend_url/https:\/\/}")
  backend_url=${backend_url%%/*}
  backend_url=https://$backend_url
  log "Backend URL normalizada: ${backend_url}"

  # ensure idempotency
  frontend_url=$(echo "${frontend_url/https:\/\/}")
  frontend_url=${frontend_url%%/*}
  frontend_url=https://$frontend_url
  log "Frontend URL normalizada: ${frontend_url}"

sudo su - deploy << EOF
  cat <<[-]EOF > /home/deploy/${instancia_add}/backend/.env
NODE_ENV=
BACKEND_URL=${backend_url}
FRONTEND_URL=${frontend_url}
PROXY_PORT=443
PORT=${backend_port}

DB_DIALECT=postgres
DB_HOST=localhost
DB_PORT=5432
DB_USER=${instancia_add}
DB_PASS=${mysql_root_password}
DB_NAME=${instancia_add}

JWT_SECRET=${jwt_secret}
JWT_REFRESH_SECRET=${jwt_refresh_secret}

REDIS_URI=redis://:${mysql_root_password}@redis-${instancia_add}_redis-${instancia_add}:6379
REDIS_OPT_LIMITER_MAX=1
REGIS_OPT_LIMITER_DURATION=3000

USER_LIMIT=${max_user}
CONNECTIONS_LIMIT=${max_whats}
CLOSED_SEND_BY_ME=true

[-]EOF
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar variáveis de ambiente para o backend"
    printf "${RED}Falha ao configurar variáveis de ambiente para o backend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Variáveis de ambiente configuradas com sucesso para o backend"
    printf "${GREEN}Variáveis de ambiente configuradas com sucesso para o backend!${NC}\n"
  fi

  sleep 2
}

# Função para configurar variáveis de ambiente do frontend
frontend_set_env_modified() {
  print_banner
  printf "${WHITE} 💻 Configurando variáveis de ambiente (frontend)...${GRAY_LIGHT}"
  printf "\n\n"
  log "Configurando variáveis de ambiente para o frontend"

  sleep 2

  # ensure idempotency
  backend_url=$(echo "${backend_url/https:\/\/}")
  backend_url=${backend_url%%/*}
  backend_url=https://$backend_url

sudo su - deploy << EOF
  cat <<[-]EOF > /home/deploy/${instancia_add}/frontend/.env
REACT_APP_BACKEND_URL=${backend_url}
REACT_APP_HOURS_CLOSE_TICKETS_AUTO = 24
[-]EOF
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao configurar variáveis de ambiente para o frontend"
    printf "${RED}Falha ao configurar variáveis de ambiente para o frontend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Variáveis de ambiente configuradas com sucesso para o frontend"
    printf "${GREEN}Variáveis de ambiente configuradas com sucesso para o frontend!${NC}\n"
  fi

  sleep 2

sudo su - deploy << EOF
  cat <<[-]EOF > /home/deploy/${instancia_add}/frontend/server.js
//simple express server to run frontend production build;
const express = require("express");
const path = require("path");
const app = express();
app.use(express.static(path.join(__dirname, "build")));
app.get("/*", function (req, res) {
	res.sendFile(path.join(__dirname, "build", "index.html"));
});
app.listen(${frontend_port});

[-]EOF
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao criar o arquivo server.js para o frontend"
    printf "${RED}Falha ao criar o arquivo server.js para o frontend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Arquivo server.js criado com sucesso para o frontend"
    printf "${GREEN}Arquivo server.js criado com sucesso para o frontend!${NC}\n"
  fi

  sleep 2
}

# Funções para instalar dependências e construir o backend/frontend
backend_node_dependencies_modified() {
  print_banner
  printf "${WHITE} 💻 Instalando dependências do backend...${GRAY_LIGHT}"
  printf "\n\n"
  log "Instalando dependências do backend"

  sleep 2

  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/backend
  
  # Verificar se é necessário instalar types adicionais
  if ! grep -q "@types/fs-extra" package.json; then
    echo "Adicionando @types/fs-extra às dependências de desenvolvimento" >> "$LOG_FILE"
    npm install --save-dev @types/fs-extra >> "$LOG_FILE" 2>&1
  fi
  
  # Verificar e instalar pacotes que podem estar causando problemas
  if grep -q "@whiskeysockets/baileys" package.json; then
    echo "Atualizando @whiskeysockets/baileys para versão compatível" >> "$LOG_FILE"
    npm install @whiskeysockets/baileys@latest >> "$LOG_FILE" 2>&1
  fi
  
  # Instalar todas as dependências
  npm install --force >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao instalar dependências do backend"
    printf "${RED}Falha ao instalar dependências do backend. Tentando resolver problemas...${NC}\n"
    
    # Tentar resolver problemas comuns
    sudo su - deploy <<EOF
    cd /home/deploy/${instancia_add}/backend
    
    # Remover node_modules e reinstalar
    rm -rf node_modules
    rm -f package-lock.json
    npm cache clean --force >> "$LOG_FILE" 2>&1
    npm install --force >> "$LOG_FILE" 2>&1
EOF
    
    if [ $? -ne 0 ]; then
      log_error "Ainda não foi possível instalar dependências do backend após tentativa de recuperação"
      printf "${RED}Ainda não foi possível instalar dependências do backend. Verifique o log para mais detalhes.${NC}\n"
    else
      log "Dependências do backend instaladas com sucesso após recuperação"
      printf "${GREEN}Dependências do backend instaladas com sucesso após recuperação!${NC}\n"
    fi
  else
    log "Dependências do backend instaladas com sucesso"
    printf "${GREEN}Dependências do backend instaladas com sucesso!${NC}\n"
  fi

  sleep 2
}

backend_node_build_modified() {
  print_banner
  printf "${WHITE} 💻 Compilando o código do backend...${GRAY_LIGHT}"
  printf "\n\n"
  log "Compilando o código do backend"

  sleep 2

  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/backend
  npm run build >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao compilar o código do backend"
    printf "${RED}Falha ao compilar o código do backend. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Código do backend compilado com sucesso"
    printf "${GREEN}Código do backend compilado com sucesso!${NC}\n"
  fi

  sleep 2
}

backend_db_migrate_modified() {
  print_banner
  printf "${WHITE} 💻 Executando db:migrate...${GRAY_LIGHT}"
  printf "\n\n"
  log "Executando migrations do banco de dados"

  sleep 2

  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/backend
  npx sequelize db:migrate >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao executar migrations do banco de dados"
    printf "${RED}Falha ao executar migrations do banco de dados. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Migrations do banco de dados executadas com sucesso"
    printf "${GREEN}Migrations do banco de dados executadas com sucesso!${NC}\n"
  fi

  sleep 2
}

backend_db_seed_modified() {
  print_banner
  printf "${WHITE} 💻 Executando db:seed...${GRAY_LIGHT}"
  printf "\n\n"
  log "Executando seeds do banco de dados"

  sleep 2

  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/backend
  npx sequelize db:seed:all >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao executar seeds do banco de dados"
    printf "${RED}Falha ao executar seeds do banco de dados. Verifique o log para mais detalhes.${NC}\n"
  else
    log "Seeds do banco de dados executadas com sucesso"
    printf "${GREEN}Seeds do banco de dados executadas com sucesso!${NC}\n"
  fi

  sleep 2
}

frontend_node_dependencies_modified() {
  print_banner
  printf "${WHITE} 💻 Instalando dependências do frontend...${GRAY_LIGHT}"
  printf "\n\n"
  log "Instalando dependências do frontend"

  sleep 2

  # Primeiro, corrigir permissões novamente para garantir
  sudo chown -R deploy:deploy /home/deploy/${instancia_add}/frontend
  sudo chmod -R 755 /home/deploy/${instancia_add}/frontend
  
  # Remover node_modules e package-lock.json se existirem para evitar problemas de permissão
  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/frontend
  if [ -d "node_modules" ]; then
    rm -rf node_modules
  fi
  if [ -f "package-lock.json" ]; then
    rm -f package-lock.json
  fi
  
  # Limpar cache do npm
  npm cache clean --force >> "$LOG_FILE" 2>&1
  
  # Instalar dependências
  npm install --no-package-lock --force >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao instalar dependências do frontend"
    printf "${RED}Falha ao instalar dependências do frontend. Tentando abordagem alternativa...${NC}\n"
    
    # Tentar outra abordagem - usar sudo para o npm install
    sudo su -c "cd /home/deploy/${instancia_add}/frontend && npm install --no-package-lock --force" deploy >> "$LOG_FILE" 2>&1
    
    if [ $? -ne 0 ]; then
      log_error "Ainda não foi possível instalar dependências do frontend"
      printf "${RED}Ainda não foi possível instalar dependências do frontend. Verifique o log para mais detalhes.${NC}\n"
    else
      log "Dependências do frontend instaladas com sucesso (método alternativo)"
      printf "${GREEN}Dependências do frontend instaladas com sucesso (método alternativo)!${NC}\n"
    fi
  else
    log "Dependências do frontend instaladas com sucesso"
    printf "${GREEN}Dependências do frontend instaladas com sucesso!${NC}\n"
  fi

  sleep 2
}

frontend_node_build_modified() {
  print_banner
  printf "${WHITE} 💻 Compilando o código do frontend...${GRAY_LIGHT}"
  printf "\n\n"
  log "Compilando o código do frontend"

  sleep 2

  # Garantir permissões corretas
  sudo chown -R deploy:deploy /home/deploy/${instancia_add}/frontend
  sudo chmod -R 755 /home/deploy/${instancia_add}/frontend
  
  sudo su - deploy <<EOF
  cd /home/deploy/${instancia_add}/frontend
  
  # Verificar se a pasta build já existe e removê-la
  if [ -d "build" ]; then
    rm -rf build
  fi
  
  # Compilar com a flag CI=false para ignorar warnings como erros
  CI=false npm run build >> "$LOG_FILE" 2>&1
EOF

  if [ $? -ne 0 ]; then
    log_error "Falha ao compilar o código do frontend"
    printf "${RED}Falha ao compilar o código do frontend. Tentando abordagem alternativa...${NC}\n"
    
    # Tentar outra abordagem - usar sudo
    sudo -u deploy bash -c "cd /home/deploy/${instancia_add}/frontend && CI=false npm run build" >> "$LOG_FILE" 2>&1
    
    if [ $? -ne 0 ]; then
      log_error "Ainda não foi possível compilar o código do frontend"
      printf "${RED}Ainda não foi possível compilar o código do frontend. Vamos ignorar e continuar...${NC}\n"
      
      # Criar uma pasta build vazia para que o processo continue
      sudo mkdir -p /home/deploy/${instancia_add}/frontend/build
      sudo chown -R deploy:deploy /home/deploy/${instancia_add}/frontend/build
      
      # Criar um arquivo index.html básico
      sudo su - deploy <<EOF
      cat > /home/deploy/${instancia_add}/frontend/build/index.html << 'END'
<!DOCTYPE html>
<html>
<head>
  <title>Atendechat - Em manutenção</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
    h1 { color: #4CAF50; }
    p { color: #555; }
  </style>
</head>
<body>
  <h1>Atendechat</h1>
  <p>Sistema em manutenção. Por favor, tente novamente mais tarde.</p>
</body>
</html>
END
EOF
      log "Criado frontend temporário de manutenção"
      printf "${YELLOW}Criado frontend temporário de manutenção. Você precisará compilar o frontend manualmente depois.${NC}\n"
    else
      log "Código do frontend compilado com sucesso (método alternativo)"
      printf "${GREEN}Código do frontend compilado com sucesso (método alternativo)!${NC}\n"
    fi
  else
    log "Código do frontend compilado com sucesso"
    printf "${GREEN}Código do frontend compilado com sucesso!${NC}\n"
  fi

  sleep 2
}

# Executar processo de instalação
print_banner
inquiry_options

# Continuar apenas se a opção 0 (instalar) foi selecionada
if [ -n "$instancia_add" ]; then
  log "Iniciando instalação da instância: ${instancia_add}"
  
  # Verificar e configurar o modo Swarm
  system_check_swarm
  
  # Configurar Git e SSH para GitHub
  setup_git_config
  setup_github_ssh
  
  # Criar diretórios e clonar o repositório (versão modificada)
  system_git_clone_modified
  
  # Corrigir problemas conhecidos no código
  fix_known_issues
  
  # Configurar Redis e banco de dados
  backend_redis_create
  
  # Configurar variáveis de ambiente
  backend_set_env_modified  # Usar a versão modificada para Docker Swarm
  frontend_set_env_modified  # Configurar o frontend também
  
  # Instalar dependências e construir o backend
  backend_node_dependencies_modified
  backend_node_build_modified
  backend_db_migrate_modified
  backend_db_seed_modified
  
  # Instalar dependências e construir o frontend
  frontend_node_dependencies_modified
  frontend_node_build_modified
  
  # Configurar Traefik para o backend e frontend
  backend_traefik_setup
  frontend_traefik_setup
  
  # Verificar o status da implantação
  verify_deployment

  log "Instalação da instância ${instancia_add} concluída com sucesso!"
  printf "${GREEN}Instalação da instância ${instancia_add} concluída com sucesso!${NC}\n"
fi

# Finalizar o log
log "Script de instalação finalizado"